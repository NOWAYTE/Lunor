// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
  
  // relations
  brokerAccounts        BrokerAccount[]
  journals        JournalEntry[]
  trades          Trade[]
  emotions        EmotionRecord[]
  alerts          Alert[]
  aiInsights      AIInsight[]
  backtests       Backtest[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model BrokerAccount {
  id               String   @id @default(cuid())
  userId           String
  metaApiAccountId String   // ID returned by MetaApi
  brokerName       String
  platform         String   // "mt4" or "mt5"
  server           String
  accountNumber    String
  status           BrokerAccountStatus @default(INITIALIZING)
  createdAt        DateTime @default(now())
  lastSyncedAt     DateTime?

  user   User    @relation(fields: [userId], references: [id])
  trades Trade[]
}

enum BrokerAccountStatus {
  INITIALIZING
  ACTIVE
  DISCONNECTED
  ERROR
}


model Trade {
  id              String    @id @default(cuid())
  brokerAccountId String
  userId          String
  symbol          String
  tradeType       TradeType // BUY / SELL
  lotSize         Float
  entryPrice      Float
  exitPrice       Float
  profitLoss      Float
  openTime        DateTime
  closeTime       DateTime
  session         SessionType? // London, NY, Asia
  strategyTag     String?
  riskReward      Float?
  notes           String?
  createdAt       DateTime @default(now())

  // Relations
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  journalEntries  JournalEntry[]
}

enum TradeType {
  BUY
  SELL
}

enum SessionType {
  ASIA
  LONDON
  NEWYORK
}

model JournalEntry {
  id          String    @id @default(cuid())
  userId      String
  tradeId     String?
  title       String?
  content     String
  voiceUrl    String?     // audio journaling file
  transcript  String?     // AI-transcribed text
  sentiment   Sentiment?  // POSITIVE / NEUTRAL / NEGATIVE
  tags        String[]    // ["setup", "discipline", "mistake"]
  createdAt   DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id])
  trade       Trade?      @relation(fields: [tradeId], references: [id])
}

enum Sentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

model EmotionRecord {
  id          String   @id @default(cuid())
  userId      String
  emotion     EmotionType
  intensity   Int      // 1â€“10
  notedAt     DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

enum EmotionType {
  CALM
  FEAR
  GREED
  REVENGE
  CONFIDENCE
  ANXIETY
}

model Backtest {
  id            String   @id @default(cuid())
  userId        String
  strategyName  String
  symbol        String
  timeframe     String
  totalTrades   Int
  winRate       Float
  profitFactor  Float
  avgRR         Float
  notes         String?
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])
}

model Alert {
  id           String   @id @default(cuid())
  userId       String
  type         AlertType
  symbol       String?
  triggerValue Float?
  message      String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
}

enum AlertType {
  PRICE
  BEHAVIOR
  SESSION
}

model AIInsight {
  id          String    @id @default(cuid())
  userId      String
  summary     String
  recommendation String?
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
}
